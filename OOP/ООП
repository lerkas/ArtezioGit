Кратко описать, какими принципами ООП вы пользуетесь при разработке приложений (на каких этапах, обосновать) 


Помимо основных принципов, на которых держится ООП есть ещё два «кита», без которых невозможен разговор — это объект и класс.
Если объект обладает состоянием, поведением и идентичностью (уникальностью), то структура и поведение схожих объектов 
определяет общий для них класс.

Поскольку ООП-языки созданы таким образом, чтобы подстраиваться под конкретную задачу, то крайне важно создать такие 
формы данных (собственно классы и объекты, как их структурные единицы), чтобы через них максимально отразить особенности 
решаемой задачи.

Для этого мы должны руководствоваться принципом абстракции, при котором упрощённо описывается некая система, опуская 
и выделяя необходимые для нас детали. Упрощать необходимо максимально, но чтобы не терялся смысл описываемой сущности 
и не появлялось ничего лишнего.

Представляется, что  выбор правильного набора абстракций для заданной предметной области, залог успеха работы будущего 
приложения.

В то время как абстракция описывает внешний интерфейс класса, инкапсуляция занимается его внутренним устройством.

Крайне важно сделать так, чтобы все объекты взаимодействовали между собой как чёрные ящики, то есть каждый объект 
имел бы некий интерфейс, посредством которого он бы общался со все остальной программой, а вся его внутренняя 
реализация была бы полностью скрыта. Это и есть принцип инкапсуляции.

Если приложение спроектировано правильно, то над каждой его частью можно работать отдельно, не зная о других его 
составных блоках. Такой подход позволяет создавать очень большие проекты, над которыми могут работать множество специалистов, и никому из них не нужно знать, как устроена вся система, потому что каждый работает лишь над своей частью.

Следующий мощный инструмент ООП — это наследование, позволяющее создавать потомков на основе уже существующих предков, 
не дублируя при этом код, а просто добавляя им новые возможности, то есть расширяя функционал предка в потомке.

Потомок является точной копией своего предка с добавлением своей уникальной функциональности, что невероятно удобно 
не только в плане экономии времени и места из-за сокращения кода, но и используется в следующем принципе ООП.

Полиморфизм — это способность «притворяться» предковым классом, но при этом уметь переопределять код предка и выполнять 
этот код тогда, когда функция «думает», что она вызывает предка.

Если совсем кратко, то использование принципов ООП заключается в разделение сущностей на области ответственности, 
делегировании им полномочий, сокрытии внутри них всей важной информации и оставлении на виду только того интерфейса, 
который нужен для выполнения задач, поставленных перед объектами. А главный бонус от этого — модульность сборки проектов. 
При грамотном конструировании строительных блоков (классов/объектов), в дальнейшем возможно их многократное использование; 
приложения можно собирать подобно конструктору lego, при минимальном изменении под текущие задачи, что многократно упрощает 
процесс и увеличивает скорость разработки. 
